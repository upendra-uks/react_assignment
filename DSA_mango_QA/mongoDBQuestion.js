// Question 3: MongoDB Aggregation Consider a MongoDB collection named sales with documents structured as follows:

// json:

// {

// "_id": ObjectId("..."),

// "date": ISODate("2024-06-15T00:00:00Z"),

// "store": "Store A",

// "items": [

//      {

//          "name": "item1",

//          "quantity": 5,

//          "price": 10.0

//      },

//      {

//          "name": "item2",

//          "quantity": 3,

//          "price": 20.0

//      }

// ]

// }

// Your task is to write an aggregation pipeline to calculate the total revenue generated by each store for each month, along with the average price of items sold. The result should be sorted first by store and then by month (in ascending order).

// The expected output should be something like this:

// json:

// [

// {

//      "store": "Store A",

//      "month": "2024-06",

//      "totalRevenue": 230.0,

//      "averagePrice": 15.0

// },

// {

//      "store": "Store B",

//      "month": "2024-06",

//      "totalRevenue": 150.0,

//      "averagePrice": 12.5

// }

// ]
////////=========================================================
db.sales.aggregate([
    // Step 1: Unwind the items array
    {
      $unwind: "$items"
    },
    // Step 2: Add a new field to extract the month and year from the date field
    {
      $addFields: {
        month: {
          $dateToString: { format: "%Y-%m", date: "$date" }
        }
      }
    },
    // Step 3: Group by store and month, calculate total revenue and average price
    {
      $group: {
        _id: {
          store: "$store",
          month: "$month"
        },
        totalRevenue: {
          $sum: { $multiply: ["$items.quantity", "$items.price"] }
        },
        averagePrice: {
          $avg: "$items.price"
        }
      }
    },
    // Step 4: Project the final result with the required structure
    {
      $project: {
        _id: 0,
        store: "$_id.store",
        month: "$_id.month",
        totalRevenue: 1,
        averagePrice: 1
      }
    },
    // Step 5: Sort by store and month in ascending order
    {
      $sort: {
        store: 1,
        month: 1
      }
    }
  ])
//===== Out put will in below form

[
    {
      "store": "Store A",
      "month": "2024-06",
      "totalRevenue": 230.0,
      "averagePrice": 15.0
    },
    {
      "store": "Store B",
      "month": "2024-06",
      "totalRevenue": 150.0,
      "averagePrice": 12.5
    }
  ]